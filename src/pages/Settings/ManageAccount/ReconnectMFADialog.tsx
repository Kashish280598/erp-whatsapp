import { useDispatch, useSelector } from "react-redux";
import { closeReconnectMFADialog } from "@/lib/features/settings/settingsSlice";
import type { RootState } from "@/lib/store";
import { InputOTPSlot } from "@/components/ui/input-otp";
import { InputOTPGroup } from "@/components/ui/input-otp";
import { InputOTP } from "@/components/ui/input-otp";
import { Card, CardContent } from "@/components/ui/card";
import { REGEXP_ONLY_DIGITS } from "input-otp";
import { SideDrawer } from "@/components/custom/SideDrawer";
import { Avatar, AvatarImage } from "@/components/ui/avatar";
import ReconnectMFAIcon from '@/assets/icons/ReconnectMFAIcon.svg';

export default function ReconnectMFADialog() {
    const dispatch = useDispatch();
    const { isOpen } = useSelector((state: RootState) => state.settings.reconnectMFADialog);

    const handleClose = () => {
        dispatch(closeReconnectMFADialog());
    }

    const handleOTPComplete = (otp: string) => {
        // TODO: Add OTP verification logic here
        console.log(otp);
    }

    return (
        <SideDrawer
            header={(
                <div className='w-full relative flex items-center gap-3 p-2'>
                    <Avatar className="h-11.5 w-11.5 rounded-[12px] border-2 border-neutral-200 p-1 bg-white flex items-center justify-center">
                        <AvatarImage src={ReconnectMFAIcon} className="h-6.5 w-[21.75px]" />
                    </Avatar>
                    <div className="flex flex-col">
                        <span className='text-[24px] font-[600] leading-9 text-warning font-inter'>Reconnect M-FA</span>
                    </div>
                </div>
            )}
            open={isOpen}
            onClose={handleClose}
            className="!max-w-[700px] px-0 pt-5 pb-0"
            type={'warning'}
            headerClassName="!mb-0 mx-5"
            onBackButtonClick={handleClose}
        >
            <div className="flex flex-col pt-3 relative h-full overflow-auto pb-0 custom-scrollbar">
                <div className="relative z-1 px-6 space-y-5 w-full text-left mb-5">
                    <div>
                        <p className="text-[13px] text-[#5E5F6E] font-[600] leading-5">
                            Step 1:
                        </p>
                        <p className="text-[13px] text-neutral leading-5">
                            Scan the QR Code using your third-party authenticator app or enter the key manually.
                        </p>
                    </div>
                    <Card className="p-0 border-neutral-200 shadow-none rounded-[8px]">
                        <CardContent className="p-5 h-[240px] flex justify-center items-center">
                            <img
                                src={"https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=https://www.google.com"}
                                alt="QR Code"
                                className="h-full"
                            />
                        </CardContent>
                    </Card>
                    <p className="text-[13px] text-neutral leading-5 mb-1">
                        {`If you can't scan the above QR code, enter below key in your third-party app instead:`}
                    </p>
                    <div className="border border-neutral-200 rounded-[8px] px-3 py-2 text-[13px] text-neutral leading-5 font-[600] bg-[#F9FAFF]">
                        FTXIWHYHIPFBHE2AH
                    </div>

                    <div>
                        <p className="text-[13px] text-[#5E5F6E] font-[600] leading-5 mt-7">
                            Step 2:
                        </p>
                        <p className="text-[13px] text-neutral leading-5">
                            After scanning the QR code image, enter the 6-digit code generated by the third-party authenticator app below.
                        </p>
                    </div>
                    <InputOTP maxLength={6} pattern={REGEXP_ONLY_DIGITS} onComplete={handleOTPComplete} containerClassName="w-fit gap-4">
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={0} />
                        </InputOTPGroup>
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={1} />
                        </InputOTPGroup>
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={2} />
                        </InputOTPGroup>
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={3} />
                        </InputOTPGroup>
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={4} />
                        </InputOTPGroup>
                        <InputOTPGroup className="flex-1">
                            <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] !border-none !outline-none border-ring ring-[1px] ring-neutral-200" index={5} />
                        </InputOTPGroup>
                    </InputOTP>
                </div>
            </div>
        </SideDrawer>
    )
}
