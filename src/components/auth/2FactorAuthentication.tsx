import { Card, CardContent } from "../ui/card";
import {
    InputOTP,
    InputOTPGroup,
    InputOTPSlot,
} from "@/components/ui/input-otp"
import { setOTPCode, verifyMFASetup } from "@/lib/features/auth/authSlice";
import { REGEXP_ONLY_DIGITS } from "input-otp";
import { useAppSelector, useAppDispatch } from "@/lib/store";
import { useNavigate } from "react-router-dom";
import { useEffect, useRef } from "react";
const TwoFactorAuthentication = () => {
    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const { qrCodeImage, secretCode, email, session, tenantId } = useAppSelector((state) => state.auth.registration.formData);
    const { totpCode } = useAppSelector((state) => state.auth.registration.formData);
    const inputRef = useRef<HTMLInputElement>(null);

    useEffect(() => {
        // focus on the first input if the totpCode is empty
        if (!totpCode?.length) {
            if (inputRef.current) {
                inputRef.current.focus();
            };
        };
    }, [totpCode]);

    const handleOTPComplete = (otp: string) => {
        const callback = (mfaSessionExpired: boolean) => {
            if (mfaSessionExpired) {
                navigate('/login', { replace: true });
            } else {
                navigate('/discover', { replace: true });
            };
        };
        // TODO: Implement OTP verification
        dispatch(verifyMFASetup({ callback, payload: { totpCode: otp, email, session, tenantId } }));
    };

    const handleOTPChange = (otp: string) => {
        dispatch(setOTPCode(otp));
        if (otp.length === 6) {
            handleOTPComplete(otp);
        };
    };

    return (
        <>
            {/* Header Text */}
            <div className="text-center space-y-2 mb-11">
                <h1 className="text-[36px] font-[600] text-neutral leading-10">
                    2-Factor Authentication
                </h1>
                <p className="text-[13px] text-[#5E5F6E] leading-5">
                    One quick step for major security gains.
                </p>
            </div>
            <div className="space-y-5 lg:w-[480px] text-left">
                <div>
                    <p className="text-[13px] text-[#5E5F6E] font-[600] leading-5">
                        Step 1:
                    </p>
                    <p className="text-[13px] text-neutral leading-5">
                        Scan the QR Code using your third-party authenticator app or enter the key manually.
                    </p>
                </div>
                <Card className="p-0 border-[#E4E4E8] shadow-none rounded-[8px]">
                    <CardContent className="p-5 h-[240px] flex justify-center items-center">
                        <img
                            src={qrCodeImage}
                            alt="QR Code"
                            className="h-full"
                        />
                    </CardContent>
                </Card>
                <p className="text-[13px] text-neutral leading-5">
                    {`If you can't scan the above QR code, enter below key in your third-party app instead:`}
                </p>
                <div title={secretCode} className="border border-[#E4E4E8] rounded-[8px] px-3 py-2 text-[13px] text-neutral leading-5 font-[600] bg-[#F9FAFF] truncate">
                    {secretCode}
                </div>

                <div>
                    <p className="text-[13px] text-[#5E5F6E] font-[600] leading-5 mt-7">
                        Step 2:
                    </p>
                    <p className="text-[13px] text-neutral leading-5">
                        After scanning the QR code image, enter the 6-digit code generated by the third-party authenticator app below.
                    </p>
                </div>
                <InputOTP
                    ref={inputRef}
                    maxLength={6}
                    pattern={REGEXP_ONLY_DIGITS}
                    containerClassName="gap-4"
                    value={totpCode}
                    onChange={handleOTPChange}
                    disabled={totpCode?.length === 6}
                    autoFocus
                >
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={0} />
                    </InputOTPGroup>
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={1} />
                    </InputOTPGroup>
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={2} />
                    </InputOTPGroup>
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={3} />
                    </InputOTPGroup>
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={4} />
                    </InputOTPGroup>
                    <InputOTPGroup className="flex-1">
                        <InputOTPSlot className="w-full text-[24px] text-neutral font-[400] sm:w-16.5 h-15 bg-[#FFFFFF] border-1 border-[#E4E4E8] !outline-none" index={5} />
                    </InputOTPGroup>
                </InputOTP>
            </div>
        </>
    );
};

export default TwoFactorAuthentication;